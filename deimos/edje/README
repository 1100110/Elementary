Edje Graphical Design Library

These routines are used for Edje.

Edje Library Documentation
version 1.1
date 2003-2012

Please see the authors page for contact details.


    What is Edje?

Edje is a complex graphical design & layout library.

It doesn't intend to do containing and regular layout like a widget
set, but it is the base for such components. Based on the requirements
of Enlightenment 0.17, Edje should serve all the purposes of creating
visual elements (borders of windows, buttons, scrollbars, etc.) and
allow the designer the ability to animate, layout and control the look
and feel of any program using Edje as its basic GUI constructor. This
library allows for multiple collections of Layouts in one file,
sharing the same image and font database and thus allowing a whole
theme to be conveniently packaged into 1 file and shipped around.

Edje separates the layout and behavior logic. Edje files ship with an
image and font database, used by all the parts in all the collections
to source graphical data. It has a directory of logical part names
pointing to the part collection entry ID in the file (thus allowing
for multiple logical names to point to the same part collection,
allowing for the sharing of data between display elements). Each part
collection consists of a list of visual parts, as well as a list of
programs. A program is a conditionally run program that if a
particular event occurs (a button is pressed, a mouse enters or leaves
a part) will trigger an action that may affect other parts. In this
way a part collection can be "programmed" via its file as to hilight
buttons when the mouse passes over them or show hidden parts when a
button is clicked somewhere etc. The actions performed in changing
from one state to another are also allowed to transition over a period
of time, allowing animation. Programs and animations can be run in
"parallel".

This separation and simplistic event driven style of programming can produce
almost any look and feel one could want for basic visual elements. Anything
more complex is likely the domain of an application or widget set that may
use Edje as a convenient way of being able to configure parts of the display.

For details of Edje's history, see the \ref history section.


    What does Edje require?

Edje requires fairly little on your system. to use the Edje runtime library
you need:

  - Evas (library)
  - Ecore (library)
  - Eet (library)
  - Embryo (library)
  - Eina (library)
  - Lua 5.1 (library)

Evas needs to be build with the JPEG, PNG and EET image loaders enabled at a
minimum. You will also need the buffer engine (which requires the
software_generic engine) as well.

Ecore needs the ECORE, ECORE_EVAS and ECORE_X modules built at a minimum.
It's suggested to build all the Ecore modules. You will need the Buffer
engine support built into Ecore_Evas for edje?_cc to function.


    How to compile and test Edje

Now you need to compile and install Edje.

  ./configure
  make
  sudo make install

You now have it installed and ready to go, but you need input
data. There are lots of examples in SVN, the best one is
Enlightenment's own theme file.

You may use different tools to edit and view the generated ".edj"
files, for instance:

  - edje_player (provided by Edje)
  - editje (http://trac.enlightenment.org/e/wiki/Editje)
  - edje_viewer (http://trac.enlightenment.org/e/wiki/Edje_Viewer)


    So how does this all work?

Edje internally holds a geometry state machine and state graph of what is
visible, not, where, at what size, with what colors etc. This is described
to Edje from an Edje .edj file containing this information. These files can
be produced by using edje_cc to take a text file (a .edc file) and "compile"
an output .edj file that contains this information, images and any other
data needed.

The application using Edje will then create an object in its Evas
canvas and set the bundle file to use, specifying the @b group name to
use. Edje will load such information and create all the required
children objects with the specified properties as defined in each @b
part of the given group. See the following example:
edje_example.c

The above example requires the following annotated source Edje file:
edje_example.edc


One should save these files as edje_example.c and edje_example.edc then:
gcc -o edje_example edje_example.c `pkg-config --cflags --libs eina evas ecore ecore-evas edje`
edje_cc edje_example.edc

./edje_example "some text"

Although simple, this example illustrates that animations and state
changes can be done from the Edje file itself without any requirement
in the C application.

Before digging into changing or creating your own Edje source (edc)
files, read the @ref edcref.



    Edje History

It's a sequel to "Ebits" which has serviced the needs of Enlightenment
development for early version 0.17. The original design parameters under
which Ebits came about were a lot more restricted than the resulting
use of them, thus Edje was born.

Edje is a more complex layout engine compared to Ebits. It doesn't
pretend to do containing and regular layout like a widget set. It
still inherits the more simplistic layout ideas behind Ebits, but it
now does them a lot more cleanly, allowing for easy expansion, and the
ability to cover much more ground than Ebits ever could. For the
purposes of Enlightenment 0.17, Edje was conceived to serve all the
purposes of creating visual elements (borders of windows, buttons,
scrollbars, etc.) and allow the designer the ability to animate,
layout and control the look and feel of any program using Edje as its
basic GUI constructor.

Unlike Ebits, Edje separates the layout and behavior logic.



    Examples on Edje's usage

What follows is a list with various commented examples, covering a great
part of Edje's API:

The example files are located at /Where/Enlightenment/is/installed/share/edje/examples

- @ref Example_Edje_Basics
- @ref tutorial_edje_basic2
- @ref tutorial_edje_swallow
- @ref tutorial_edje_swallow2
- @ref tutorial_edje_table
- @ref tutorial_edje_box
- @ref tutorial_edje_box2
- @ref tutorial_edje_color_class
- @ref tutorial_edje_animations
- @ref tutorial_edje_animations_2
- @ref Example_Edje_Signals_Messages
- @ref tutorial_edje_signals_2
- @ref tutorial_edje_text
- @ref tutorial_edje_drag
- @ref tutorial_edje_perspective



Authors
    Carsten Haitzler                    <raster@@rasterman.com>
    Tilman Sauerbeck                    (tilman at code-monkey de)
    ZigsMcKenzie                        <zigsmckenzie@@gmail.com>
    Cedric BAIL                         <cedric.bail@@free.fr>
    Brian Mattern                       <rephorm@@rephorm.com>
    Mathieu Taillefumier                <mathieu.taillefumier@@free.fr>
    Tristan                             <blunderer@@gmail.com>
    Gustavo Lima Chaves                 <glima@@profusion.mobi>
    Bruno Dilly                         <bdilly@@profusion.mobi>
    Fabiano Fidêncio                    <fidencio@@profusion.mobi>
    Jihoon Kim                          <jihoon48.kim@@samsung.com>
    Tiago Falcão                        <tiago@@profusion.mobi>
    Davide Andreoli                     <dave@@gurumeditation.it>
    Sebastian Dransfeld                 <sd@@tango.flipp.net>
    Tom Hacohen                         <tom@@stosb.com>
    Aharon Hillel                       <a.hillel@@partner.samsung.com>
    Shilpa Singh                        <shilpa.singh@samsung.com> <shilpasingh.o@gmail.com>
    Mike Blumenkrantz                   <michael.blumenkrantz@gmail.com
    Jaehwan Kim                         <jae.hwan.kim@samsung.com>
    billiob (Boris Faure)               <billiob@gmail.com>
    Govindaraju SM                      <govi.sm@samsung.com> <govism@gmail.com>
    Prince Kumar Dubey                  <prince.dubey@samsung.com> <prince.dubey@gmail.com>
    David Seikel                        <onefang at gmail.com>
    Guilherme Íscaro                    <iscaro@profusion.mobi>

Please contact <enlightenment-devel@lists.sourceforge.net> to get in
contact with the developers and maintainers.
